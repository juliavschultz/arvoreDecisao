# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TUw5j-CvRHYAcftqi6VAAb8rpVoiTAzh
"""

!pip install streamlit

import pandas as pd
from sklearn.preprocessing import OrdinalEncoder
from sklearn.model_selection import train_test_split #faz a divisão dos dados em treino e teste
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from ipywidgets import interactive
from IPython.display import SVG,display
from graphviz import Source
from sklearn.tree import export_graphviz
import numpy as np
import pickle


dataset = pd.read_csv('/content/drive/MyDrive/docencia IA/dadosCOVIDrs/completo/dados26abril22.csv', sep=';')

encoder = OrdinalEncoder() #nao esquecer desse ()
nomesClasses = set(dataset['EVOLUCAO'])
print('nomesClasses: ',nomesClasses)

dataset['SEXO'] = encoder.fit_transform(pd.DataFrame(dataset['SEXO']))
dataset['FAIXAETARIA'] = encoder.fit_transform(pd.DataFrame(dataset['FAIXAETARIA']))
dataset['EVOLUCAO'] = encoder.fit_transform(pd.DataFrame(dataset['EVOLUCAO']))
dataset['HOSPITALIZADO'] = encoder.fit_transform(pd.DataFrame(dataset['HOSPITALIZADO']))
dataset['FEBRE'] = encoder.fit_transform(pd.DataFrame(dataset['FEBRE']))
dataset['TOSSE'] = encoder.fit_transform(pd.DataFrame(dataset['TOSSE']))
dataset['GARGANTA'] = encoder.fit_transform(pd.DataFrame(dataset['GARGANTA']))
dataset['DISPNEIA'] = encoder.fit_transform(pd.DataFrame(dataset['DISPNEIA']))
#dataset['OUTROS'] = encoder.fit_transform(pd.DataFrame(dataset['OUTROS']))
#dataset['CONDICOES'] = encoder.fit_transform(pd.DataFrame(dataset['CONDICOES']))
dataset['GESTANTE'] = encoder.fit_transform(pd.DataFrame(dataset['GESTANTE']))
dataset['RACA_COR'] = encoder.fit_transform(pd.DataFrame(dataset['RACA_COR']))
dataset['SRAG'] = encoder.fit_transform(pd.DataFrame(dataset['SRAG']))
dataset.info()

colunas = dataset.columns.to_list()
nomesColunas = colunas [1:3]
nomesColunas = nomesColunas+colunas[4:]

print(nomesColunas)
dataset_features = dataset[nomesColunas]
dataset_classes = dataset['EVOLUCAO']
nomesClassesED = ['REC','OBT']
print (set(dataset_classes))

#divisão dos dados entre treino e teste

feature_treino,feature_teste,classes_treino,classes_teste = train_test_split(dataset_features,
                                                                             dataset_classes,
                                                                             test_size=0.15,
                                                                             random_state=15)

#construção da árvore

arvore = DecisionTreeClassifier()
#treino a arvore
arvore.fit(feature_treino,classes_treino)

#verificar se a árvore prediz corretamente
predicao = arvore.predict(feature_teste)

print(metrics.classification_report(classes_teste,predicao,target_names=nomesClassesED))



colunas = dataset.columns[:10] #nome das colunas

classes = np.unique(nomesClassesED) #pega o nome das classes e coloca no gráfico


def plot_tree(crit,split,depth,min_samples_split,min_samples_leaf=0.2):
  estimador = DecisionTreeClassifier(random_state=0,
                                     criterion=crit,
                                     splitter=split,
                                     max_depth=depth, 
                                     min_samples_split=min_samples_split,
                                     min_samples_leaf=min_samples_leaf)
  estimador.fit(feature_treino,classes_treino)#treinar
  graph = Source(export_graphviz(estimador, 
                                 out_file=None, 
                                 feature_names=colunas,
                                 class_names=classes, 
                                 impurity=True, 
                                 filled=True))
  display(SVG(graph.pipe(format='svg')))
  return estimador

inter = interactive(plot_tree,crit=['gini','entropy'],split=['best','random'],
                    depth=[1,2,3,4,5,6,7,8,9,10],min_samples_split=(1,5),min_samples_leaf=(1,5))
display(inter)

nomeArquivo = '/content/drive/MyDrive/docencia IA/dadosCOVIDrs/completo/arvore.pkl'
arvore_pkl = open(nomeArquivo, 'wb')
pickle.dump(arvore, arvore_pkl)
arvore_pkl.close()

import streamlit as st
import pickle
from sklearn.tree import export_graphviz

arquivo = open('arvore.pkl', 'rb')
arvore = pickle.load(arquivo)

individuo = []
st.text_input('Digite o sexo do paciente (masculino/feminino)', key='sexo')
if st.session_state.sexo.lower() == masculino:
  individuo.append(0)
else:
  individuo.append(1)

st.text_input('qual a idade?', key='fx')
idade = int(st.session_state.fx)
if 59<fx<70:
  individuo.append(0)
else:
  if 2<fx<5:
    individuo.append(1)
  else:
    if 49<fx<60:
      individuo.append(2)
    else:
      if 4<fx<10:
        individuo.append(3)
      else:
          if 29<fx<40:
            individuo.append(4)
          else:
              if 69<fx<80:
                individuo.append(5)
              else:
                  if 9<fx<15:
                    individuo.append(6)
                  else:
                      if fx<2:
                        individuo.append(7)
                      else:
                          if 19<fx<30:
                            individuo.append(8)
                          else:
                              if 14<fx<20:
                                individuo.append(9)
                              else:
                                  if 39<fx<40:
                                    individuo.append(10)
                                  else:
                                      individuo.append(11)

st.text_input = input("O indivíduo está hospitalizado? s/n", key='hospitalizado')
if st.session_state.hospitalizado.lower() == 's':
  individuo.append(0)
else:
  individuo.append(1)

st.text_input = input("O indivíduo tem febre? s/n", key='febre')
if st.session_state.febre.lower() == 's':
  individuo.append(0)
else:
  individuo.append(1)

st.text_input = input("O indivíduo tem tosse? s/n", key='tosse')
if st.session_state.febre.lower() == 'n':
  individuo.append(0)
else:
  individuo.append(1)

st.text_input = input("O indivíduo tem dor de garganta? s/n", key='garganta')
if st.session_state.garganta.lower() == 's':
  individuo.append(0)
else:
  individuo.append(1)

st.text_input = input("O indivíduo tem dispneia? s/n", key='dispneia')
if st.session_state.dispneia.lower() == 's':
  individuo.append(0)
else:
  if st.session_state.dispneia.lower() == 'nao info':
    individuo.append(1)
  else:
    if st.session_state.dispneia.lower() == 'n':
      individuo.append(2)

st.text_input = input("O indivíduo é gestante? s/n", key='gestante')
if st.session_state.gestante.lower() == 's':
  individuo.append(0)
else:
  individuo.append(1)

st.text_input = input("O indivíduo se identifica com qual raça/cor? s/n", key='cor')
if st.session_state.cor.lower() == 'nao info':
  individuo.append(0)
else:
  if st.session_state.cor.lower() == 'preta':
    individuo.append(1)
  else:
    if st.session_state.cor.lower() == 'parda':
      individuo.append(2)
    else:
      if st.session_state.cor.lower() == 'indigena':
        individuo.append(3)
      else:
          if st.session_state.cor.lower() == 'parda':
            individuo.append(4)
          else:
            if st.session_state.cor.lower() == 'branca':
              individuo.append(5)
            else:
              if st.session_state.cor.lower() == 'amarela':
                individuo.append(6)

st.text_input = input("O indivíduo desenvolveu SRAG? s/n", key='srag')
if st.session_state.srag.lower() == 's':
  individuo.append(0)
else:
  individuo.append(1)

